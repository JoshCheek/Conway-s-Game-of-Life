#!/usr/bin/env jruby -s --server

# this script is intended to be invoked via game_of_life

# ==========  CHECK COMMAND LINE ARGS  ==========
def usage
  puts "usage: game_of_life [seed] [dimensions] [side_length] [offset] [rate] [image_dir] [map] [suppress]"
  puts "where:"
  puts "  seed is -seed=[x1,y1],[x2,y2],...,[xn,yn]"
  puts "    and upper left is [0,0]"
  puts "    defaults to Gosper's Glider Gun"
  puts "  dimensions is -dimensions=x,y"
  puts "    and determines how many cells are on the board"
  puts "  side_length is -side_length=n"
  puts "    n determines how many pixels are used for each cell"
  puts "  offset is -offset=x,y"
  puts "    it allows you to enter pixels in relation to zero"
  puts "    then push them out to the middle, for example"
  puts "  rate is -rate=n"
  puts "    it sets the frame rate for the video, defaults to 16"
  puts "  image_dir is -image_dir=path"
  puts "    images that compose the frames in the movie will be"
  puts "    stored in this directory"
  puts "  map allows you to enter your own map (on stdin) that will be parsed for you"
  puts "    this way you don't have to convert to the coordinate system"
  puts "    period represents dead cells, anything else represents live cells"
  puts "    note: if invoking by hand, my system accepts Ctrl-D twice as EOF"
  puts "  suppress is -suppress=video or -suppress=animation"
  puts "    if you aren't interested in getting a video rather than observing the output"
  puts "      then you may wish to -suppress=animation"
  puts "    if you are only interested in observing the output, and not in generating a video"
  puts "      then you may wish to -suppress=video"
  puts "Output will be displayed on terminal."
  puts "Send interrupt once when you are satisfied."
  puts "It will generate the file ./life.mp4"
end

# print usage if necessary
if $h
  usage
  exit
end

# validate $suppress
if $suppress && !%w(video animation).find { |option| $suppress == option }
  $stderr.puts "invalid value for suppression, please select from 'video' or 'animation'"
  exit 1
end




# ==========  SETTING UP THE GAME  ==========

# make our lib accessible and load game of life code
$: << File.dirname(__FILE__) + '/../lib'
require 'game_of_life'

# some different defaults you can use
spaceship = '[0,0],[3,0],[4,1],[0,2],[4,2],[1,3],[2,3],[3,3],[4,3]'
gun = begin
  left_square   = '[1,5],[2,5],[1,6],[2,6]'
  half_circle   = '[14,3],[13,3],[12,4],[11,5],[11,6],[11,7],[12,8],[13,9],[14,9]'
  arrow         = '[16,4],[17,5],[15,6],[17,6],[18,6],[17,7],[16,8]'
  frog          = '[25,1],[25,2],[23,2],[21,3],[22,3],[21,4],[22,4],[21,5],[22,5],[23,6],[25,6],[25,7]'
  right_square  = '[35,3],[36,3],[35,4],[36,4]'
  "#{left_square},#{half_circle},#{arrow},#{frog},#{right_square}"
end

# check if there was a map
if $map
  board         = GameOfLife[$stdin.read]
  $seed         = board.cells.to_a.inspect.gsub(/\s/,'').sub(/\A\[/,'').sub(/\]\Z/,'')
  $dimensions ||= "#{board.width},#{board.height}"
end

# create the board, using the seed that was passed in, or default
x_offset , y_offset = ($offset||"0,0").split(',').map(&:to_i)
$seed ||= gun
$seed = $seed.scan(/\[\d+,\d+\]/).map { |cell| cell.scan(/\d+/).map(&:to_i) }
$seed.map! { |(x,y)| [ x+x_offset , y+y_offset ] }
board = GameOfLife.new(*$seed)

# set the dimensions using the seed that was passed in
# or use the board's defaults
$dimensions ||= "#{board.width},#{board.height}"
board.width , board.height = $dimensions.split(',').map(&:to_i)
$side_length = ($side_length || 5).to_i


# ==========  SETTING UP THE IMAGES  ==========

# load the Java image apis
include Java
import javax.imageio.ImageIO
import java.awt.image.BufferedImage
import java.awt.image.WritableRaster

# make the results dir
require 'fileutils'
dirname = $image_dir || "/tmp/game-of-life-images-#{Time.now.strftime '%s'}"
FileUtils.rm_rf dirname
FileUtils.mkdir dirname

# converts colours, usually in the rgb hex format :'#FF0000'
# into the rgb format java array of [ red_int , green_int , blue_int ]
def to_rgb(colour)
  colour.to_s.delete('#').scan(/../).map { |component| component.to_i(16) }.to_java(:int)
end

def draw_pixel(pixels,x,y,side_length,color)
  (x*side_length...x.next*side_length).each do |x_i|
    (y*side_length...y.next*side_length).each do |y_i|
      pixels.set_pixel x_i , y_i , color
    end
  end  
end

def draw_board(board,side_length)
  # http://download.oracle.com/javase/6/docs/api/java/awt/image/BufferedImage.html
  canvas = BufferedImage.new board.width*side_length , board.height*side_length , BufferedImage::TYPE_INT_RGB
  pixels = canvas.get_raster
  
  board.to_a.each_with_index do |row,y|
    row.each_with_index do |element,x|
      color = to_rgb( element ? 'FFFFFF' : '000000')
      draw_pixel pixels , x , y , side_length , color
    end
  end
  
  canvas
end

def make_image(board,filename,side_length)
  print "\e[0GDrawing #{filename}"                            # it takes a while, keep user updated
  canvas = draw_board board , side_length                     # generate the image
  ImageIO.write canvas , "gif" , java.io.File.new(filename)   # write the image to file
end


# ==========  PLAY THE GAME AND  MAKE THE VIDEO  ==========

# turn the results into a movie 
at_exit do
  if $suppress != "video"
    system %Q(ffmpeg -r #{$rate||16} -f image2 -i "#{dirname}/%05d.gif" -b 600k ./life.mp4)
  end
end

# some games never end, so user will have to interrupt them
# we still want to print the game out in this case
Signal.trap("INT") { exit }

# draw each image
system 'clear' unless $suppress == "animation"
infinity = 1 / 0.0
0.upto infinity do |index|
  if $suppress != "animation"
    print "\e[0;0H"
    puts board.to_a.map { |row| row.map { |element| element ? 'X' : ' ' }.join }.join("\n")
  end
  if $suppress != "video"
    filename = File.join dirname , '%05d.gif'%index
    make_image board , filename , $side_length
  end
  board.tick!
end
